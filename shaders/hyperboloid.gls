#define NUM_LINES 30

const float tau = 8.0*atan(1.0);

float bump(float d) {
    return 1.0/(1.0 + sqrt(d));
}

mat2 rot(float angle) {
    float s = sin(angle), c = cos(angle);
    return mat2(c,-s,
                s, c);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;
    uv.x *= iResolution.x / iResolution.y;
    vec3 col = vec3(0);
    for(int i = 0; i < NUM_LINES; i++) {
        float ifl = float(i) / float(NUM_LINES);
        float angle = sin(ifl*tau + iTime/10.0)/1.3;
        float offset = cos(ifl*tau + iTime/10.0);
        float b = bump(abs((uv*rot(angle)).x + offset/2.0)*1.3);
    	col += smoothstep(0.70, 1.0, b);
    }
    col *= 0.6;
    col *= vec3(1.0, 0.75, 0.5);
	fragColor = vec4(vec3(col),1.0);
}
