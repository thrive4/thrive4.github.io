// courtesy https://www.shadertoy.com/view/wlS3zh
#define resolution 30
#define waveFrequency 10.0
#define waveSize 0.2
#define simulationSpeed 0.05
#define baseColorIntensity 0.2

vec3 baseColor = vec3(0.0, 0.4, 0.2);

float circle(vec2 uv, float radius, float blur, vec2 offset) {
    float dist = distance(uv, offset);
    return smoothstep(radius, radius - blur, dist);
}

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
    // Setup normalized coordinates, etc.
    vec2 uv = fragCoord / iResolution.xy;
    uv -= 0.5;
    uv.x *= iResolution.x / iResolution.y;

    float mask = 0.0;
    float t = iTime * simulationSpeed;
    float z = 1.0;

    // Use literal constants directly in loop bounds
    for (int yi = 0; yi < 30; yi++) {
        // Map integer loop index to fractional y coordinate
        float y = -0.5 + (1.3 + 0.5) * float(yi) / 30.0;

        vec2 uvOffset = uv * z;
        float fadeIn = smoothstep(0.5, -0.2, y);
        float fadeOut = smoothstep(-0.5, -0.3, y);

        for (int xi = 0; xi < 30; xi++) {
            float x = -0.5 + (0.5 + 0.5) * float(xi) / 30.0;

            vec2 offset = vec2(
                x + sin((t + y) * waveFrequency) * waveSize,
                y + cos((t + x) * waveFrequency) * (waveSize * 1.5)
            );

            mask += circle(uvOffset, 0.3, 0.1, offset * vec2(45.0, 2.5) + vec2(3.0, -0.8)) * fadeIn * fadeOut;
        }

        z += (1.0 / 30.0) * 50.0;
    }

    baseColor *= baseColorIntensity;

    vec3 color = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0.0, 2.0, 4.0));

    fragColor = vec4(baseColor + color * mask, 1.0);
}
