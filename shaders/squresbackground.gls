// https://www.shadertoy.com/view/ls3XDX
const float total = 60.;//number of rectangles
const float minSize = 0.01;//rectangle min size
const float maxSize = 0.1-minSize;//rectangle max size
const float yDistribution = 0.5;

vec4 bgColor = vec4(0.01, 0.16, 0.42, 1.0);
vec4 rectColor = vec4(0.01, 0.26, 0.57, 1.0);

float rectangle(vec2 uv, vec2 pos, float width, float height) {
	return step(pos.x, uv.x) * step(uv.x, pos.x + width) * step(pos.y, uv.y) * step(uv.y, pos.y + height);
}

mat2 rotate2d(float _angle){
    return mat2(cos(_angle),-sin(_angle),
                sin(_angle),cos(_angle));
}

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	vec2 uv = fragCoord.xy / iResolution.xy * 2. - 1.;
    uv.x *= iResolution.x/iResolution.y;
    
    float velX = iTime/8.;
    float velY = iTime/10.;
    
    vec4 color = bgColor*(2.-abs(uv.y*2.));
    
    for(float i=0.; i<total; i++){
        float index = i/total;
        float rnd = rand(vec2(index));
        vec3 pos = vec3(0, 0., 0.);
        pos.x = fract(velX*rnd+index)*4.-2.0;
        pos.y = sin(index*rnd*1000.+velY) * yDistribution;
        pos.z = maxSize*rnd+minSize;
        vec2 uvRot = uv - pos.xy + pos.z/2.;
    	uvRot = rotate2d( i+iTime/2. ) * uvRot;
        uvRot += pos.xy+pos.z/2.;
        float rect = rectangle(uvRot, pos.xy, pos.z, pos.z);
	    color += rectColor * rect * pos.z/maxSize;
    }
	fragColor = color;
}